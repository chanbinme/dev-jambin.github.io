{"0": {
    "doc": "ArrayIndexOutOfBoundsException 원인과 해결법",
    "title": "ArrayIndexOutOfBoundsException 원인과 해결법",
    "content": " ",
    "url": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html",
    "relUrl": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html"
  },"1": {
    "doc": "ArrayIndexOutOfBoundsException 원인과 해결법",
    "title": "원인",
    "content": "정해진 배열의 크기보다 크거나 음수 index에 대한 요청이 있으면 ArrayIndexOutOfBoundsException이 발생한다. | 배열의 index는 1부터 시작하는 것이 아닌 0부터 시작한다. 배열의 크기를 n이라고 한다면 index는 1부터 n까지가 아닌 0부터 n-1까지인 것이다. 보통 이 부분에서 해당 예외가 많이 발생하는 것 같다. | ArrayIndexOutOfBoundsException은 자바 컴파일러에서 검사하지 않고 실행을 시켜야 알 수 있다. | . int[] arr = new int[5] // arr의 범위는 arr[0] ~ arr[4]로 총 5개의 인덱스를 생성 arr[5] = 5; // arr[5]는 존재하지 않기 때문에 예외 발생! // 결과 Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5 at ArrTest.main(ArrTest.java:7) // Index 5는 배열의 length의 범위를 벗어났다는 뜻 . ",
    "url": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html#%EC%9B%90%EC%9D%B8",
    "relUrl": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html#원인"
  },"2": {
    "doc": "ArrayIndexOutOfBoundsException 원인과 해결법",
    "title": "해결 방법",
    "content": ". | 배열 범위에 맞게 값을 넣는 법을 알아보자 | . 1. 반복문 . for(int i = 0; i &lt; arr.length; i++) { ... } // 배열의 범위만큼만 반복 . int i = 0; while(i &lt; arr.length) { // 배열의 범위만큼만 반복 ... i++; } . 2. foreach문 . for(int i : arr) { ... } // 배열의 범위만큼만 반복 . 3. try-catch문 . try { // 예외가 발생할 것 같은 코드 작성 int[] arr = new int[3]; for (int i = 0; i &lt; 3; i++) { arr[i] = i; } // catch([발생할 것 같은 예외] [예외 변수 이름]) { 예외 발생 시 실행할 코드 } } catch (ArrayIndexOutOfBoundsException e) { // ArrayIndexOutOfBoundsException가 발생하면 ArrayIndexOutOfBoundsException 출력해줘 System.out.println(e); } . ",
    "url": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95",
    "relUrl": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/ArrayIndexOutOfBoundsException.html#해결-방법"
  },"3": {
    "doc": "Java",
    "title": "Java",
    "content": " ",
    "url": "/docs/Java/",
    "relUrl": "/docs/Java/"
  },"4": {
    "doc": "나의 에러 일지",
    "title": "나의 에러 일지",
    "content": " ",
    "url": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/",
    "relUrl": "/docs/%EB%82%98%EC%9D%98%20%EC%97%90%EB%9F%AC%20%EC%9D%BC%EC%A7%80/"
  },"5": {
    "doc": "Home",
    "title": "Home",
    "content": "This is an offically-supported, bare-minimum template to deploy Just the Docs to GitHub Pages. More specifically, it: . | uses a gem-based approach, i.e. uses a Gemfile and loads the just-the-docs gem (pinned to the latest stable) | uses the new GitHub Pages / Actions workflow to deploy to pages | . Other than that, you’re free to customize this template however you’d like! Browse our documentation to learn more about how to use the theme! . To get started, just click “use this template”! . ",
    "url": "/",
    "relUrl": "/"
  },"6": {
    "doc": "클래스와 객체",
    "title": "클래스와 객체",
    "content": ". ",
    "url": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html",
    "relUrl": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html"
  },"7": {
    "doc": "클래스와 객체",
    "title": "객체(Object)",
    "content": "사전에 객체를 검색해보면 ‘실세계에 존재하거나 생각할 수 있는 것’을 말한다.쉽게 말해 사물과 같은 눈에 보이는 것뿐만 아니라, 개념이나 논리와 같이 눈에 보이지 않는 것들도 객체라고 볼 수 있다.우리가 생각하고 표현할 수 있는 모든 것이 객체라는 것이다. (치킨이 먹고싶은 이 마음도 객체…?) . 그렇다면 객체 지향 프로그래밍에서의 객체란 무엇일까?객체 지향에서의 객체는 ‘클래스의 인스턴스’라고 불린다. 다시 말해 클래스에서 정의된 속성과 기능을 구현시킨 실제적인 인스턴스라는 뜻이다. ",
    "url": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#%EA%B0%9D%EC%B2%B4object",
    "relUrl": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#객체object"
  },"8": {
    "doc": "클래스와 객체",
    "title": "인스턴스(Instance)",
    "content": "인스턴스는 하나의 클래스로부터 만들어진 객체를 말한다. 조금 더 자세히 말해보자면 클래스로부터 소프트웨어 세계에 실체화된 객체라고 보면 된다. 그럼 객체와 인스턴스는 같은걸까? . 그렇게 보기에는 어렵다. 인스턴스는 객체라고 할 수 있겠지만 객체는 모든 인스턴스를 포괄적으로 부르는 의미이기 때문에 객체를 인스턴스라고 하기는 어렵다.마치 바보도 사람이지만 사람이 바보라고 볼 수는 없는 느낌이랄까(?) . ",
    "url": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4instance",
    "relUrl": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#인스턴스instance"
  },"9": {
    "doc": "클래스와 객체",
    "title": "클래스(Class)",
    "content": "아까부터 언급했던 클래스는 뭘까?클래스는 속성과 기능을 가진 객체를 총칭하는 개념이다. 클래스는 개념일뿐 실제하지 않는다.객체(인스턴스)를 만들기 위한 설계도라고 생각하면 쉽다. 그리고 이 설계도를 베이스로 속성과 기능들을 재조합해 다양한 객체를 생성한다.필자는 지금 치킨이 몹시 먹고 싶기때문에 치킨을 예로 들겠다. 여기 치킨이라는 클래스가 있다. 이제 치킨 클래스로 맛있는 실제하는 객체를 만들어보자. 클래스는 new 키워드를 통해 인스턴스를 생성한다. Chicken 클래스로 소프트웨어 세계에 실제하는 뿌링클 인스턴스를 생성해보자. Chicken 뿌링클 = new Chicken(); . 뿌링클 완성! . Chicken 클래스로 다른 치킨도 만들 수 있다. Chicken 고추바사삭 = new Chicken(); Chicken 허니콤보 = new Chicken(); Chicken 지코바 = new Chicken(); . ",
    "url": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#%ED%81%B4%EB%9E%98%EC%8A%A4class",
    "relUrl": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#클래스class"
  },"10": {
    "doc": "클래스와 객체",
    "title": "정리",
    "content": "클래스 : 객체를 정의하고 만들어내기 위한 설계도. 클래스는 개념일뿐 실제하지 않는다.인스턴스 : 클래스로부터 소프트웨어 세계에 실제화된 객체객체 : 모든 인스턴스를 포함한 포괄적인 의미 . ",
    "url": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#%EC%A0%95%EB%A6%AC",
    "relUrl": "/docs/Java/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4.html#정리"
  }
}
